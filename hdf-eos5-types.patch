--- hdf-eos5-2.0/gctp/src/br_gctp.c.orig	2021-04-22 01:06:56.000000000 +0200
+++ hdf-eos5-2.0/gctp/src/br_gctp.c	2024-12-15 10:23:00.797248754 +0100
@@ -2,6 +2,9 @@
 #ifdef unix
 /*  Fortran bridge routine for the UNIX */
 
+int gctp(double *incoor,long *insys,long *inzone,double *inparm,long *inunit,long *indatum,long *ipr,char *efile,long *jpr,char *pfile,double *outcoor,
+     long *outsys,long *outzone,double *outparm,long *outunit,long *outdatum,char fn27[],char fn83[],long *iflg);
+
 void gctp_(incoor,insys,inzone,inparm,inunit,indatum,ipr,efile,jpr,pfile,
                outcoor, outsys,outzone,outparm,outunit,fn27,fn83,iflg)
 
@@ -20,11 +23,13 @@ long *outsys;
 long *outzone;
 double *outparm;
 long *outunit;
+char fn27[];
+char fn83[];
 long *iflg;
 
 {
 gctp(incoor,insys,inzone,inparm,inunit,indatum,ipr,efile,jpr,pfile,outcoor,
-     outsys,outzone,outparm,outunit,fn27,fn83,iflg);
+     outsys,outzone,outparm,outunit,/*FIXME*/(void*)0,fn27,fn83,iflg);
 
 return;
 }
--- hdf-eos5-2.0/src/EHapi.c.orig	2021-04-22 01:06:56.000000000 +0200
+++ hdf-eos5-2.0/src/EHapi.c	2024-12-15 11:01:06.164867855 +0100
@@ -326,6 +326,8 @@ HE5_EHhid2long(hid_t invalue)
 	outvalue = HE5_EHint2long(invalue);
   else if (sizeof(hid_t) == sizeof(long))
 	outvalue = invalue;
+  else if (sizeof(hid_t) == sizeof(long long))
+	outvalue = HE5_EHllong2long(invalue);
 
   return(outvalue);
 }
@@ -411,6 +413,8 @@ HE5_EHhid2int(hid_t invalue)
 	outvalue = invalue;
   else if (sizeof(hid_t) == sizeof(long))
 	outvalue = HE5_EHlong2int(invalue);
+  else if (sizeof(hid_t) == sizeof(long long))
+	outvalue = HE5_EHllong2int(invalue);
 
   return(outvalue);
 }
@@ -448,6 +452,8 @@ HE5_EHint2hid(int invalue)
 	outvalue = invalue;
   else if (sizeof(hid_t) == sizeof(long))
 	outvalue = HE5_EHint2long(invalue);
+  else if (sizeof(hid_t) == sizeof(long long))
+	outvalue = HE5_EHint2llong(invalue);
 
   return(outvalue);
 }
@@ -486,6 +492,8 @@ HE5_EHlong2hid(long invalue)
 	outvalue = HE5_EHlong2int(invalue);
   else if (sizeof(hid_t) == sizeof(long))
 	outvalue = invalue;
+  else if (sizeof(hid_t) == sizeof(long long))
+	outvalue = HE5_EHlong2llong(invalue);
 
   return(outvalue);
 }
@@ -543,6 +551,79 @@ HE5_EHlong2int(long invalue)
   return(outvalue);
 }
 
+int
+HE5_EHllong2int(long long invalue)
+{
+  herr_t    status   = FAIL;
+  long      outvalue = FAIL;
+
+  status = H5Tconvert(H5T_NATIVE_LLONG, H5T_NATIVE_INT, 1, &invalue, NULL, H5P_DEFAULT);
+  if (status == FAIL)
+	{
+	  H5Epush(__FILE__, "HE5_EHllong2int", __LINE__, H5E_FUNC, H5E_CANTINIT, "Cannot convert \"long long\" to \"int\" data type.");
+	  return(status);
+	}
+
+  memmove(&outvalue,&invalue,sizeof(int));
+  return(outvalue);
+}
+
+long
+HE5_EHllong2long(long long invalue)
+{
+  herr_t    status   = FAIL;
+  long      outvalue = FAIL;
+
+  status = H5Tconvert(H5T_NATIVE_LLONG, H5T_NATIVE_LONG, 1, &invalue, NULL, H5P_DEFAULT);
+  if (status == FAIL)
+	{
+	  H5Epush(__FILE__, "HE5_EHllong2long", __LINE__, H5E_FUNC, H5E_CANTINIT, "Cannot convert \"long long\" to \"long\" data type.");
+	  return(status);
+	}
+
+  memmove(&outvalue,&invalue,sizeof(long));
+  return(outvalue);
+}
+
+long long
+HE5_EHint2llong(int invalue)
+{
+  herr_t    status   = FAIL;
+  long long outvalue = FAIL;
+  long long buf      = FAIL;
+
+  memmove(&buf,&invalue,sizeof(int));
+
+  status = H5Tconvert(H5T_NATIVE_INT, H5T_NATIVE_LLONG, 1, &buf, NULL, H5P_DEFAULT);
+  if (status == FAIL)
+	{
+	  H5Epush(__FILE__, "HE5_EHint2llong", __LINE__, H5E_FUNC, H5E_CANTINIT, "Cannot convert \"int\" to \"long long\" data type.");
+	  return(status);
+	}
+
+  memmove(&outvalue,&buf,sizeof(long long));
+  return(outvalue);
+}
+
+long long
+HE5_EHlong2llong(long invalue)
+{
+  herr_t    status   = FAIL;
+  long long outvalue = FAIL;
+  long long buf      = FAIL;
+
+  memmove(&buf,&invalue,sizeof(long));
+
+  status = H5Tconvert(H5T_NATIVE_LONG, H5T_NATIVE_LLONG, 1, &buf, NULL, H5P_DEFAULT);
+  if (status == FAIL)
+	{
+	  H5Epush(__FILE__, "HE5_EHlong2llong", __LINE__, H5E_FUNC, H5E_CANTINIT, "Cannot convert \"long\" to \"long long\" data type.");
+	  return(status);
+	}
+
+  memmove(&outvalue,&buf,sizeof(long long));
+  return(outvalue);
+}
 
 /*----------------------------------------------------------------------------|
 |  BEGIN_PROLOG                                                               |
@@ -577,6 +658,8 @@ HE5_EHhid2hsize(hid_t invalue)
 	outvalue = HE5_EHint2hsize(invalue);
   else if (sizeof(hid_t) == sizeof(long) )
 	outvalue = HE5_EHlong2hsize(invalue);
+  else if (sizeof(hid_t) == sizeof(long long))
+	outvalue = HE5_EHllong2hsize(invalue);
 
   return(outvalue);
 }
@@ -729,6 +812,10 @@ HE5_EHhsize2hid(hsize_t invalue)
 	outvalue = HE5_EHhsize2int(invalue);
   else if (sizeof(hid_t) == sizeof(long) )
 	outvalue = HE5_EHhsize2long(invalue);
+  else if (sizeof(hid_t) == sizeof(long long))
+        outvalue = HE5_EHhsize2llong(invalue);
+  else if (sizeof(hid_t) == sizeof(long long))
+        outvalue = HE5_EHhssize2llong(invalue);
 
   return(outvalue);
 }
@@ -844,6 +931,55 @@ HE5_EHhsize2int(hsize_t invalue)
   return(outvalue);
 }
 
+hsize_t
+HE5_EHllong2hsize(long long invalue)
+{
+
+  herr_t   status       = FAIL;
+  void     *buf         = NULL;
+  hsize_t  outvalue     = 0;
+  size_t   maxsize      = 0;
+
+  maxsize = MAX(H5Tget_size(H5T_NATIVE_LLONG),H5Tget_size(H5T_NATIVE_HSIZE));
+  buf = calloc(1,maxsize);
+  memmove(buf,&invalue,sizeof(long long));
+
+  status = H5Tconvert(H5T_NATIVE_LLONG, H5T_NATIVE_HSIZE, 1, buf, NULL, H5P_DEFAULT);
+  if (status == FAIL)
+	{
+	  H5Epush(__FILE__, "HE5_EHllong2hsize", __LINE__, H5E_FUNC, H5E_CANTINIT, "Cannot convert \"long long\" to \"hsize_t\" data type.");
+	  return(status);
+	}
+
+  memmove(&outvalue,buf,H5Tget_size(H5T_NATIVE_HSIZE));
+  free(buf);
+  return(outvalue);
+}
+
+long long
+HE5_EHhsize2llong(hsize_t invalue)
+{
+  herr_t   status       = FAIL;
+  void     *buf         = NULL;
+  long long outvalue    = FAIL;
+  size_t   maxsize      = 0;
+
+  maxsize = MAX(H5Tget_size(H5T_NATIVE_LLONG),H5Tget_size(H5T_NATIVE_HSIZE));
+  buf = calloc(1,maxsize);
+  memmove(buf,&invalue,H5Tget_size(H5T_NATIVE_HSIZE));
+
+  status = H5Tconvert(H5T_NATIVE_HSIZE, H5T_NATIVE_LLONG, 1, buf, NULL, H5P_DEFAULT);
+  if (status == FAIL)
+	{
+	  H5Epush(__FILE__, "HE5_EHhsize2llong", __LINE__, H5E_FUNC, H5E_CANTINIT, "Cannot convert \"hsize_t\" to \"long long\" data type.");
+	  return(status);
+	}
+
+  memmove(&outvalue,buf,H5Tget_size(H5T_NATIVE_LLONG));
+  free(buf);
+  return(outvalue);
+}
+
 /*----------------------------------------------------------------------------|
 |  BEGIN_PROLOG                                                               |
 |                                                                             |
@@ -878,6 +1014,8 @@ HE5_EHhid2hssize(hid_t invalue)
 	outvalue = HE5_EHint2hssize(invalue);
   else if (sizeof(hid_t) == sizeof(long) )
 	outvalue = HE5_EHlong2hssize(invalue);
+  else if (sizeof(hid_t) == sizeof(long long))
+	outvalue = HE5_EHllong2hssize(invalue);
 
   return(outvalue);
 }
@@ -1143,6 +1281,55 @@ HE5_EHhssize2int(hssize_t invalue)
   return(outvalue);
 }
 
+hssize_t
+HE5_EHllong2hssize(long long invalue)
+{
+
+  herr_t   status      = FAIL;
+  void     *buf        = NULL;
+  hssize_t outvalue    = FAIL;
+  size_t   maxsize     = 0;
+
+  maxsize = MAX(sizeof(long long),H5Tget_size(H5T_NATIVE_HSSIZE));
+  buf = calloc(1,maxsize);
+  memmove(buf,&invalue,sizeof(long long));
+
+  status = H5Tconvert(H5T_NATIVE_LLONG, H5T_NATIVE_HSSIZE, 1, buf, NULL, H5P_DEFAULT);
+  if (status == FAIL)
+	{
+	  H5Epush(__FILE__, "HE5_EHllong2hssize", __LINE__, H5E_FUNC, H5E_CANTINIT, "Cannot convert \"long long\" to \"hssize_t\" data type.");
+	  return(status);
+	}
+
+  memmove(&outvalue,buf,H5Tget_size(H5T_NATIVE_HSSIZE));
+  free(buf);
+  return(outvalue);
+}
+
+long long
+HE5_EHhssize2llong(hssize_t invalue)
+{
+  herr_t   status       = FAIL;
+  void     *buf         = NULL;
+  long long outvalue    = FAIL;
+  size_t   maxsize      = 0;
+
+  maxsize = MAX(H5Tget_size(H5T_NATIVE_LLONG),H5Tget_size(H5T_NATIVE_HSSIZE));
+  buf = calloc(1,maxsize);
+  memmove(buf,&invalue,H5Tget_size(H5T_NATIVE_HSSIZE));
+
+  status = H5Tconvert(H5T_NATIVE_HSSIZE, H5T_NATIVE_LLONG, 1, buf, NULL, H5P_DEFAULT);
+  if (status == FAIL)
+	{
+	  H5Epush(__FILE__, "HE5_EHhssize2llong", __LINE__, H5E_FUNC, H5E_CANTINIT, "Cannot convert \"hssize_t\" to \"long long\" data type.");
+	  return(status);
+	}
+
+  memmove(&outvalue,buf,H5Tget_size(H5T_NATIVE_LLONG));
+  free(buf);
+  return(outvalue);
+}
+
 /*----------------------------------------------------------------------------|
 |  BEGIN_PROLOG                                                               |
 |                                                                             |
@@ -2224,7 +2411,7 @@ HE5_EHchkfid(hid_t fid, const char *name
   if (fid < HE5_EHIDOFFSET || fid > HE5_NEOSHDF + HE5_EHIDOFFSET)
     {
 	  status = FAIL;
-	  sprintf(errbuf,"Invalid file ID: %d. ID should range from %d to  %d .\n", fid, HE5_EHIDOFFSET, HE5_NEOSHDF + HE5_EHIDOFFSET);
+	  sprintf(errbuf,"Invalid file ID: %"PRId64". ID should range from %d to  %d .\n", fid, HE5_EHIDOFFSET, HE5_NEOSHDF + HE5_EHIDOFFSET);
 	  H5Epush(__FILE__, "HE5_EHchkfid", __LINE__, H5E_ARGS, H5E_BADVALUE, errbuf);
 	  HE5_EHprint(errbuf, __FILE__, __LINE__);
     }
@@ -2236,7 +2423,7 @@ HE5_EHchkfid(hid_t fid, const char *name
 	  if( HE5_HeosTable[ fid0 ].active == 0)
         {
 		  status = FAIL;
-		  sprintf(errbuf,"HE5_EHchkid: File ID %d not active (%s).\n",fid, name);
+		  sprintf(errbuf,"HE5_EHchkid: File ID %"PRId64" not active (%s).\n",fid, name);
 		  H5Epush(__FILE__, "HE5_EHchkfid", __LINE__, H5E_ARGS, H5E_BADVALUE, errbuf);
 		  HE5_EHprint(errbuf, __FILE__, __LINE__);
         }
@@ -8617,7 +8804,7 @@ HE5_EHclose(hid_t fid)
   else
     {
       status = FAIL;
-      sprintf(errbuf,"Invalid file ID: %d . ID should range from %d to %d . \n", fid, HE5_EHIDOFFSET, HE5_NEOSHDF + HE5_EHIDOFFSET);
+      sprintf(errbuf,"Invalid file ID: %"PRId64" . ID should range from %d to %d . \n", fid, HE5_EHIDOFFSET, HE5_NEOSHDF + HE5_EHIDOFFSET);
       H5Epush(__FILE__,  "HE5_EHclose", __LINE__, H5E_FILE, H5E_BADFILE, errbuf);
       HE5_EHprint(errbuf, __FILE__, __LINE__);
     }
@@ -12297,7 +12484,7 @@ HE5_EHreadmeta(hid_t fid, const char *Me
   if( HE5_HeosTable[ fid0 ].active == 0)
     {
       status = FAIL;
-      sprintf(errbuf,"HE5_EHreadmeta: File ID %d not active \n",fid);
+      sprintf(errbuf,"HE5_EHreadmeta: File ID %"PRId64" not active \n",fid);
       H5Epush(__FILE__, "HE5_EHreadmeta", __LINE__, H5E_ARGS, H5E_BADVALUE, errbuf);
       HE5_EHprint(errbuf, __FILE__, __LINE__);
     }
@@ -12607,7 +12794,7 @@ HE5_EHinqmetadatas(hid_t fid, char *meta
   if( HE5_HeosTable[ fid0 ].active == 0)
     {
       status = FAIL;
-      sprintf(errbuf,"HE5_EHreadmeta: File ID %d not active \n",fid);
+      sprintf(errbuf,"HE5_EHreadmeta: File ID %"PRId64" not active \n",fid);
       H5Epush(__FILE__, "HE5_EHreadmeta", __LINE__, H5E_ARGS, H5E_BADVALUE, errbuf);
       HE5_EHprint(errbuf, __FILE__, __LINE__);
     }
--- hdf-eos5-2.0/src/PTapi.c.orig	2021-04-22 01:06:56.000000000 +0200
+++ hdf-eos5-2.0/src/PTapi.c	2024-12-15 12:57:32.150354856 +0100
@@ -823,7 +823,7 @@ HE5_PTattach(hid_t fid, const char *poin
 	      status = HE5_PTgetlevelname_fromSM(pointID, i, LevelName);
 	      if ( status == FAIL )
 		{
-		  sprintf(errbuf, "Failed to get LevelName for the Level_%d.",i) ;
+		  sprintf(errbuf, "Failed to get LevelName for the Level_%"PRId64".",i) ;
 		  H5Epush(__FILE__, "HE5_PTattach", __LINE__, H5E_ARGS, H5E_BADVALUE, errbuf);
 		  HE5_EHprint(errbuf, __FILE__, __LINE__);
 
@@ -1190,7 +1190,7 @@ HE5_PTnrecs(hid_t pointID, int level)
   nlevels = HE5_PTnlevels(pointID);
   if (nlevels == 0)
     {
-      sprintf(errbuf, "No Levels Defined for point ID: %d\n", pointID);
+      sprintf(errbuf, "No Levels Defined for point ID: %"PRId64"\n", pointID);
       H5Epush(__FILE__, "HE5_PTnrecs", __LINE__, H5E_BTREE, H5E_NOTFOUND, errbuf);
       HE5_EHprint(errbuf, __FILE__, __LINE__);
       return(0);
@@ -1199,7 +1199,7 @@ HE5_PTnrecs(hid_t pointID, int level)
     {
       /* Report error if level # to large */
       /* -------------------------------- */
-      sprintf(errbuf, "Only %d levels Defined for point ID: %d\n", nlevels, pointID);
+      sprintf(errbuf, "Only %d levels Defined for point ID: %"PRId64"\n", nlevels, pointID);
       H5Epush(__FILE__, "HE5_PTnrecs", __LINE__, H5E_ARGS, H5E_BADVALUE, errbuf);
       HE5_EHprint(errbuf, __FILE__, __LINE__);
       return(0);
@@ -1656,7 +1656,7 @@ HE5_PTnfields(hid_t pointID, int level,
   if (nlevels == 0)
     {
       status = FAIL;
-      sprintf(errbuf, "No Levels Defined for point ID: %d\n", pointID);
+      sprintf(errbuf, "No Levels Defined for point ID: %"PRId64"\n", pointID);
       H5Epush(__FILE__, "HE5_PTnfields", __LINE__, H5E_BTREE, H5E_NOTFOUND, errbuf);
       HE5_EHprint(errbuf, __FILE__, __LINE__);
       return(status);
@@ -1666,7 +1666,7 @@ HE5_PTnfields(hid_t pointID, int level,
       /* Report error if level # too large */
       /* --------------------------------- */
       status = FAIL;
-      sprintf(errbuf, "Only %d levels Defined for point ID: %d\n", nlevels, pointID);
+      sprintf(errbuf, "Only %d levels Defined for point ID: %"PRId64"\n", nlevels, pointID);
       H5Epush(__FILE__, "HE5_PTnfields", __LINE__, H5E_ARGS, H5E_BADRANGE, errbuf);
       HE5_EHprint(errbuf, __FILE__, __LINE__);
       return(status);
@@ -1838,7 +1838,7 @@ HE5_PTgetlevelname(hid_t pointID, int  l
       if (nlevels == 0)
 	{
 	  status = FAIL;
-	  sprintf(errbuf, "No Levels Defined for point ID: %d\n", pointID);
+	  sprintf(errbuf, "No Levels Defined for point ID: %"PRId64"\n", pointID);
 	  H5Epush(__FILE__, "HE5_PTgetlevelname", __LINE__, H5E_BTREE, H5E_NOTFOUND, errbuf);
 	  HE5_EHprint(errbuf, __FILE__, __LINE__);
 
@@ -1848,7 +1848,7 @@ HE5_PTgetlevelname(hid_t pointID, int  l
 	  /* Report error if level # to large */
 	  /* -------------------------------- */
 	  status = FAIL;
-	  sprintf(errbuf, "Only %d levels Defined for point ID: %d\n", nlevels, pointID);
+	  sprintf(errbuf, "Only %d levels Defined for point ID: %"PRId64"\n", nlevels, pointID);
 	  H5Epush(__FILE__, "HE5_PTgetlevelname", __LINE__, H5E_ARGS, H5E_BADVALUE, errbuf);
 	  HE5_EHprint(errbuf, __FILE__, __LINE__);
 	}
@@ -3043,7 +3043,7 @@ HE5_PTwritelevel(hid_t pointID, int leve
   if (nlevels == 0)
     {
       status = FAIL;
-      sprintf(errbuf, "No Levels Defined for point ID: %d\n", pointID);
+      sprintf(errbuf, "No Levels Defined for point ID: %"PRId64"\n", pointID);
       H5Epush(__FILE__, "HE5_PTwritelevel",   __LINE__, H5E_BTREE, H5E_NOTFOUND, errbuf);
       HE5_EHprint(errbuf, __FILE__, __LINE__);
       return(status);
@@ -3053,7 +3053,7 @@ HE5_PTwritelevel(hid_t pointID, int leve
       /* Report error if level # to large */
       /* -------------------------------- */
       status = FAIL;
-      sprintf(errbuf, "Only %d levels Defined for point ID: %d\n", nlevels, pointID);
+      sprintf(errbuf, "Only %d levels Defined for point ID: %"PRId64"\n", nlevels, pointID);
       H5Epush(__FILE__, "HE5_PTwritelevel", __LINE__, H5E_ARGS, H5E_BADVALUE, errbuf);
       HE5_EHprint(errbuf, __FILE__, __LINE__);
       return(status);
@@ -3482,7 +3482,7 @@ HE5_PTlevelinfo(hid_t pointID, int level
   nlevels = HE5_PTnlevels(pointID);
   if (nlevels == 0)
     {
-      sprintf(errbuf, "No Levels Defined for point ID: %d\n", pointID);
+      sprintf(errbuf, "No Levels Defined for point ID: %"PRId64"\n", pointID);
       H5Epush(__FILE__, "HE5_PTlevelinfo", __LINE__, H5E_BTREE, H5E_NOTFOUND, errbuf);
       HE5_EHprint(errbuf, __FILE__, __LINE__);
       return(FAIL);
@@ -3491,7 +3491,7 @@ HE5_PTlevelinfo(hid_t pointID, int level
     {
       /* Report error if level # to large */
       /* -------------------------------- */
-      sprintf(errbuf, "Only %d levels Defined for point ID: %d\n", nlevels, pointID);
+      sprintf(errbuf, "Only %d levels Defined for point ID: %"PRId64"\n", nlevels, pointID);
       H5Epush(__FILE__, "HE5_PTlevelinfo", __LINE__, H5E_ARGS, H5E_BADVALUE, errbuf);
       HE5_EHprint(errbuf, __FILE__, __LINE__);
       return(FAIL);
@@ -3909,7 +3909,7 @@ HE5_PTreadlevel(hid_t pointID, int level
   if (nlevels == 0)
     {
       status = FAIL;
-      sprintf(errbuf, "No Levels Defined for point ID: %d\n", pointID);
+      sprintf(errbuf, "No Levels Defined for point ID: %"PRId64"\n", pointID);
       H5Epush(__FILE__, "HE5_PTreadlevel", __LINE__, H5E_BTREE, H5E_NOTFOUND, errbuf);
       HE5_EHprint(errbuf, __FILE__, __LINE__);
       return(status);
@@ -3919,7 +3919,7 @@ HE5_PTreadlevel(hid_t pointID, int level
       /* Report error if level # to large */
       /* -------------------------------- */
       status = FAIL;
-      sprintf(errbuf, "Only %d levels Defined for point ID: %d\n", nlevels, pointID);
+      sprintf(errbuf, "Only %d levels Defined for point ID: %"PRId64"\n", nlevels, pointID);
       H5Epush(__FILE__, "HE5_PTreadlevel", __LINE__, H5E_FILE, H5E_SEEKERROR, errbuf);
       HE5_EHprint(errbuf, __FILE__, __LINE__);
       return(status);
@@ -9093,7 +9093,7 @@ HE5_PTreadlevel_f(hid_t pointID, int lev
   if (nlevels == 0)
     {
       status = FAIL;
-      sprintf(errbuf, "No Levels Defined for point ID: %d\n", pointID);
+      sprintf(errbuf, "No Levels Defined for point ID: %"PRId64"\n", pointID);
       H5Epush(__FILE__, "HE5_PTreadlevel_f", __LINE__, H5E_BTREE, H5E_NOTFOUND, errbuf);
       HE5_EHprint(errbuf, __FILE__, __LINE__);
       return(status);
@@ -9103,7 +9103,7 @@ HE5_PTreadlevel_f(hid_t pointID, int lev
       /* Report error if level # to large */
       /* -------------------------------- */
       status = FAIL;
-      sprintf(errbuf, "Only %d levels Defined for point ID: %d\n", nlevels, pointID);
+      sprintf(errbuf, "Only %d levels Defined for point ID: %"PRId64"\n", nlevels, pointID);
       H5Epush(__FILE__, "HE5_PTreadlevel_f", __LINE__, H5E_FILE, H5E_SEEKERROR, errbuf);
       HE5_EHprint(errbuf, __FILE__, __LINE__);
       return(status);
@@ -9507,7 +9507,7 @@ HE5_PTwritelevel_f(hid_t pointID, int le
   if (nlevels == 0)
     {
       status = FAIL;
-      sprintf(errbuf, "No Levels Defined for point ID: %d\n", pointID);
+      sprintf(errbuf, "No Levels Defined for point ID: %"PRId64"\n", pointID);
       H5Epush(__FILE__, "HE5_PTwritelevel_f", __LINE__, H5E_BTREE, H5E_NOTFOUND, errbuf);
       HE5_EHprint(errbuf, __FILE__, __LINE__);
       return(status);
@@ -9517,7 +9517,7 @@ HE5_PTwritelevel_f(hid_t pointID, int le
       /* Report error if level # to large */
       /* -------------------------------- */
       status = FAIL;
-      sprintf(errbuf, "Only %d levels Defined for point ID: %d\n", nlevels, pointID);
+      sprintf(errbuf, "Only %d levels Defined for point ID: %"PRId64"\n", nlevels, pointID);
       H5Epush(__FILE__, "HE5_PTwritelevel_f", __LINE__, H5E_ARGS, H5E_BADVALUE, errbuf);
       HE5_EHprint(errbuf, __FILE__, __LINE__);
       return(status);
--- hdf-eos5-2.0/src/SWapi.c.orig	2021-04-22 01:06:56.000000000 +0200
+++ hdf-eos5-2.0/src/SWapi.c	2024-12-15 12:59:55.089580488 +0100
@@ -2031,6 +2031,9 @@ HE5_SWdefdimscale(hid_t swathID,  char *
   return(status);
 }
 
+herr_t
+HE5_SWsetdimscale2(hid_t swathID, char *fieldname, char *dimname, char *dimscalename,
+		  const hsize_t dimsize, hid_t numbertype_in, void * data);
 
 /*----------------------------------------------------------------------------|
 |  BEGIN_PROLOG                                                               |
@@ -13444,7 +13447,7 @@ HE5_SWdefboxregion(hid_t swathID, double
 
 		      if ((HE5_SWXRegion[k]->nRegions) > HE5_MAXNREGIONS)
 			{
-			  sprintf(errbuf, "HE5_SWXRegion[%d]->nRegions exceeded HE5_MAXNREGIONS = %d.\n", k, HE5_MAXNREGIONS);
+			  sprintf(errbuf, "HE5_SWXRegion[%"PRId64"]->nRegions exceeded HE5_MAXNREGIONS = %d.\n", k, HE5_MAXNREGIONS);
 			  H5Epush(__FILE__, "HE5_SWdefboxregion", __LINE__, H5E_ARGS, H5E_BADRANGE, errbuf);
 			  HE5_EHprint(errbuf, __FILE__, __LINE__);
 			  if (lonArr != NULL) free(lonArr);
@@ -14768,7 +14771,7 @@ HE5_SWextractregion(hid_t swathID, hid_t
       if (regionID < 0 || regionID >= HE5_NSWATHREGN)
         {
 	  status = FAIL;
-	  sprintf(errbuf, "Invalid Region ID: %d.\n", regionID);
+	  sprintf(errbuf, "Invalid Region ID: %"PRId64".\n", regionID);
 	  H5Epush(__FILE__, "HE5_SWextractregion", __LINE__, H5E_ARGS, H5E_BADVALUE, errbuf);
 	  HE5_EHprint(errbuf, __FILE__, __LINE__);
         }
@@ -14781,7 +14784,7 @@ HE5_SWextractregion(hid_t swathID, hid_t
       if (HE5_SWXRegion[regionID] == 0)
         {
 	  status = FAIL;
-	  sprintf(errbuf, "Inactive Region ID: %d.\n", regionID);
+	  sprintf(errbuf, "Inactive Region ID: %"PRId64".\n", regionID);
 	  H5Epush(__FILE__, "HE5_SWextractregion", __LINE__, H5E_ARGS, H5E_BADVALUE, errbuf);
 	  HE5_EHprint(errbuf, __FILE__, __LINE__);
         }
@@ -16336,7 +16339,7 @@ HE5_SWregioninfo(hid_t swathID, hid_t re
       if (regionID < 0 || regionID >= HE5_NSWATHREGN)
         {
 	  status = FAIL;
-	  sprintf(errbuf, "Invalid Region id: %d.\n", regionID);
+	  sprintf(errbuf, "Invalid Region id: %"PRId64".\n", regionID);
 	  H5Epush(__FILE__, "HE5_SWregioninfo", __LINE__, H5E_ARGS, H5E_BADVALUE, errbuf);
 	  HE5_EHprint(errbuf, __FILE__, __LINE__);
         }
@@ -16349,7 +16352,7 @@ HE5_SWregioninfo(hid_t swathID, hid_t re
       if (HE5_SWXRegion[regionID] == 0)
         {
 	  status = FAIL;
-	  sprintf(errbuf,"Inactive Region ID: %d.\n", regionID);
+	  sprintf(errbuf,"Inactive Region ID: %"PRId64".\n", regionID);
 	  H5Epush(__FILE__, "HE5_SWregioninfo", __LINE__, H5E_ARGS, H5E_BADVALUE, errbuf);
 	  HE5_EHprint(errbuf, __FILE__, __LINE__);
         }
@@ -16816,7 +16819,7 @@ HE5_SWupdatescene(hid_t swathID, hid_t r
       if (regionID < 0 || regionID >= HE5_NSWATHREGN)
         {
 	  status = FAIL;
-	  sprintf(errbuf, "Invalid Region ID: %d.\n", regionID);
+	  sprintf(errbuf, "Invalid Region ID: %"PRId64".\n", regionID);
 	  H5Epush(__FILE__, "HE5_SWupdatescene", __LINE__, H5E_ARGS, H5E_BADRANGE, errbuf);
 	  HE5_EHprint(errbuf, __FILE__, __LINE__);
         }
@@ -16829,7 +16832,7 @@ HE5_SWupdatescene(hid_t swathID, hid_t r
       if (HE5_SWXRegion[regionID] == 0)
         {
 	  status = FAIL;
-	  sprintf(errbuf, "Inactive Region ID: %d.\n", regionID);
+	  sprintf(errbuf, "Inactive Region ID: %"PRId64".\n", regionID);
 	  H5Epush(__FILE__, "HE5_SWupdatescene", __LINE__, H5E_ARGS, H5E_BADRANGE, errbuf);
 	  HE5_EHprint(errbuf, __FILE__, __LINE__);
         }
@@ -16858,7 +16861,7 @@ HE5_SWupdatescene(hid_t swathID, hid_t r
 		  free(HE5_SWXRegion[regionID]);
 		  HE5_SWXRegion[regionID] = 0;
 		  status = FAIL;
-		  sprintf(errbuf, "Inactive Region ID: %d.\n", regionID);
+		  sprintf(errbuf, "Inactive Region ID: %"PRId64".\n", regionID);
 		  H5Epush(__FILE__, "HE5_SWupdatescene", __LINE__, H5E_ARGS, H5E_BADRANGE, errbuf);
 		  HE5_EHprint(errbuf, __FILE__, __LINE__);
 		  break;
@@ -16977,7 +16980,7 @@ HE5_SWupdateidxmap(hid_t swathID, hid_t
       if (regionID < 0 || regionID >= HE5_NSWATHREGN)
         {
 	  status = FAIL;
-	  sprintf(errbuf,"Invalid Region id: %d.\n", regionID);
+	  sprintf(errbuf,"Invalid Region id: %"PRId64".\n", regionID);
 	  H5Epush(__FILE__, "HE5_SWupdateidxmap", __LINE__, H5E_ARGS, H5E_BADRANGE, errbuf);
 	  HE5_EHprint(errbuf, __FILE__, __LINE__);
         }
@@ -16990,7 +16993,7 @@ HE5_SWupdateidxmap(hid_t swathID, hid_t
       if (HE5_SWXRegion[regionID] == 0)
         {
 	  status = FAIL;
-	  sprintf(errbuf, "Inactive Region ID: %d.\n", regionID);
+	  sprintf(errbuf, "Inactive Region ID: %"PRId64".\n", regionID);
 	  H5Epush(__FILE__, "HE5_SWupdateidxmap", __LINE__, H5E_FILE, H5E_BADRANGE, errbuf );
 	  HE5_EHprint(errbuf, __FILE__, __LINE__);
         }
@@ -23745,7 +23748,7 @@ HE5_SWindexinfo(hid_t regionID, char *ob
   if (regionID < 0 || regionID >= HE5_NSWATHREGN)
     {
       status = FAIL;
-      sprintf(errbuf, "Invalid Region ID: %d.\n", regionID);
+      sprintf(errbuf, "Invalid Region ID: %"PRId64".\n", regionID);
       H5Epush(__FILE__, "HE5_SWindexinfo", __LINE__, H5E_ARGS, H5E_BADVALUE, errbuf);
       HE5_EHprint(errbuf, __FILE__, __LINE__);
       return(status);
@@ -23756,7 +23759,7 @@ HE5_SWindexinfo(hid_t regionID, char *ob
   if (HE5_SWXRegion[regionID] == 0)
     {
       status = FAIL;
-      sprintf(errbuf, "Inactive Region ID: %d.\n", regionID);
+      sprintf(errbuf, "Inactive Region ID: %"PRId64".\n", regionID);
       H5Epush(__FILE__, "HE5_SWindexinfo", __LINE__, H5E_ARGS, H5E_BADVALUE, errbuf);
       HE5_EHprint(errbuf, __FILE__, __LINE__);
       return(status);
--- hdfeos5/src/ZAapi.c.orig	2017-11-13 17:02:46.000000000 +0100
+++ hdfeos5/src/ZAapi.c	2019-12-10 16:46:27.564304260 +0100
@@ -1275,6 +1275,9 @@
   return(status);
 }
 
+herr_t
+HE5_ZAsetdimscale2(hid_t zaID, char *fieldname, char *dimname, char *dimscalename,
+		  const hsize_t dimsize, hid_t numbertype_in, void * data);
 
 /*----------------------------------------------------------------------------|
 |  BEGIN_PROLOG                                                               |
--- hdf-eos5-2.0/samples/he5_gd_datainfo.c.orig	2024-12-15 10:50:32.858298771 +0100
+++ hdf-eos5-2.0/samples/he5_gd_datainfo.c	2024-12-15 13:01:49.158962521 +0100
@@ -26,10 +26,10 @@ int main(void)
   size_t       size       = 0;
 
   fid = HE5_GDopen(FILENAME, H5F_ACC_RDONLY);
-  printf("File ID returned by HE5_GDopen() :         %ld \n", (long) fid);
+  printf("File ID returned by HE5_GDopen() :         %"PRId64" \n", fid);
     
   GDid = HE5_GDattach(fid, OBJECT);
-  printf("Grid ID returned by HE5_GDattach() :       %ld \n", (long) GDid);
+  printf("Grid ID returned by HE5_GDattach() :       %"PRId64" \n", GDid);
 
   fieldgroup = HE5_HDFE_DATAGROUP;
   status = HE5_GDinqdatatype(GDid, FIELDNAME, NULL, fieldgroup, &datatype, &classid, &order, &size);
--- hdf-eos5-2.0/samples/he5_gd_defunlimfld.c.orig	2024-12-15 10:50:32.858298771 +0100
+++ hdf-eos5-2.0/samples/he5_gd_defunlimfld.c	2024-12-15 13:02:51.015294083 +0100
@@ -49,7 +49,7 @@ int main()
   if (gdfid != FAIL)
     {
 	  GDid1 = HE5_GDattach(gdfid, "UTMGrid");
-	  printf("Grid ID returned by HE5_GDattach(,\"UTMGrid\"):      %ld\n", (long) GDid1);
+	  printf("Grid ID returned by HE5_GDattach(,\"UTMGrid\"):      %"PRId64"\n", GDid1);
 	
 	  /* Define appendable field "Vegetation"  */
 	  tilerank    = 2;
@@ -67,7 +67,7 @@ int main()
 	  printf("Status returned by HE5_GDdeffield(\"Vegetation\"):   %d\n", status);
 	
 	  GDid2 = HE5_GDattach(gdfid, "PolarGrid");
-	  printf("Grid ID returned by HE5_GDattach(\"PolarGrid\"):     %ld\n", (long) GDid2);
+	  printf("Grid ID returned by HE5_GDattach(\"PolarGrid\"):     %"PRId64"\n", GDid2);
 
 	  status = HE5_GDdeffield(GDid2, "Temperature", "YDim,XDim", NULL, H5T_NATIVE_FLOAT, 0);
 	  printf("Status returned by HE5_GDdeffield(\"Temperature\"):  %d\n", status);
--- hdf-eos5-2.0/samples/he5_gd_setup.c.orig	2024-12-15 10:50:32.858298771 +0100
+++ hdf-eos5-2.0/samples/he5_gd_setup.c	2024-12-15 13:03:48.454982906 +0100
@@ -64,7 +64,7 @@ int main()
   ydim = 200;
     
   GDid   = HE5_GDcreate(gdfid, "UTMGrid", xdim, ydim, uplft, lowrgt);
-  printf("Grid ID returned by HE5_GDcreate :                    %ld \n", (long) GDid);
+  printf("Grid ID returned by HE5_GDcreate :                    %"PRId64" \n", GDid);
 
   status = HE5_GDdefproj(GDid, HE5_GCTP_UTM, zonecode, spherecode, projparm);
   printf("status returned by HE5_GDdefproj(...\"HE5_GCTP_UTM\"...) :  %d \n", status);
@@ -108,7 +108,7 @@ int main()
   ydim = 100;
 
   GDid2  = HE5_GDcreate(gdfid, "PolarGrid", xdim, ydim, NULL, NULL);
-  printf("Grid ID returned by HE5_GDcreate() :                  %ld \n", (long) GDid2);
+  printf("Grid ID returned by HE5_GDcreate() :                  %"PRId64" \n", GDid2);
 
   status = HE5_GDdefproj(GDid2, HE5_GCTP_PS, dummy, spherecode, projparm);
   printf("status returned by HE5_GDdefproj(...\"HE5_GCTP_PS\"...) :   %d \n", status);
@@ -137,7 +137,7 @@ int main()
   lowrgt[1] = HE5_EHconvAng(20., HE5_HDFE_DEG_DMS);
     
   GDid3  = HE5_GDcreate(gdfid, "GEOGrid", xdim, ydim, uplft, lowrgt);
-  printf("Grid ID returned by HE5_GDcreate() :                  %ld \n", (long) GDid3);
+  printf("Grid ID returned by HE5_GDcreate() :                  %"PRId64" \n", GDid3);
 
   status = HE5_GDdefproj(GDid3, HE5_GCTP_GEO, dummy, dummy, NULL);
   printf("status returned by HE5_GDdefproj(...\"HE5_GCTP_GEO\"...) :  %d \n", status);
--- hdf-eos5-2.0/samples/he5_gd_subset.c.orig	2024-12-15 10:50:32.858298771 +0100
+++ hdf-eos5-2.0/samples/he5_gd_subset.c	2024-12-15 13:04:27.298105808 +0100
@@ -53,7 +53,7 @@ int main()
 		  cornerlon[1] = 90.;  cornerlat[1] = 0.;
 
 		  regionID = HE5_GDdefboxregion(GDid, cornerlon, cornerlat);
-		  printf("Region ID returned by HE5_GDdefboxregion() :    %ld \n", (long) regionID);
+		  printf("Region ID returned by HE5_GDdefboxregion() :    %"PRId64" \n", regionID);
 
 		  ntype = (hid_t *)calloc(1, sizeof(hid_t));    
 		  status = HE5_GDregioninfo(GDid, regionID, "Temperature", ntype,&rank, dims, &size, upleft, lowright);
--- hdf-eos5-2.0/samples/he5_pt_datainfo.c.orig	2024-12-15 10:50:32.858298771 +0100
+++ hdf-eos5-2.0/samples/he5_pt_datainfo.c	2024-12-15 13:05:02.397915656 +0100
@@ -26,10 +26,10 @@ int main(void)
   size_t       size     = 0;
 
   fid = HE5_PTopen(FILENAME, H5F_ACC_RDONLY);
-  printf("File ID returned by HE5_PTopen() :        %ld \n", (long) fid);
+  printf("File ID returned by HE5_PTopen() :        %"PRId64" \n", fid);
     
   PTid = HE5_PTattach(fid, OBJECT);
-  printf("Point ID returned by HE5_PTattach() :     %ld \n", (long) PTid);
+  printf("Point ID returned by HE5_PTattach() :     %"PRId64" \n", PTid);
 
   fieldgroup = HE5_HDFE_DATAGROUP;
   status = HE5_PTinqdatatype(PTid, "Observations", NULL, fieldgroup, &datatype, &classid, &order, &size);
--- hdf-eos5-2.0/samples/he5_pt_definelevels.c.orig	2024-12-15 10:50:32.858298771 +0100
+++ hdf-eos5-2.0/samples/he5_pt_definelevels.c	2024-12-15 13:05:47.577670896 +0100
@@ -378,7 +378,7 @@ int main()
 	}
   else 
     {
-	  printf("File ID returned by HE5_PTopen() : %ld \n", (long) ptfid);
+	  printf("File ID returned by HE5_PTopen() : %"PRId64" \n", ptfid);
     }
   
   return 0;
--- hdf-eos5-2.0/samples/he5_pt_readattrs.c.orig	2024-12-15 10:50:32.858298771 +0100
+++ hdf-eos5-2.0/samples/he5_pt_readattrs.c	2024-12-15 13:06:18.404170562 +0100
@@ -29,10 +29,10 @@ int main()
   /* Open the HDF-EOS file, "Point.h5" */
   /* --------------------------------- */
   ptfid = HE5_PTopen("Point.h5", H5F_ACC_RDONLY);
-  printf("File ID returned by HE5_PTopen() :       %ld \n", (long) ptfid);
+  printf("File ID returned by HE5_PTopen() :       %"PRId64" \n", ptfid);
 
   PTid = HE5_PTattach(ptfid, "FixedBuoy Point");
-  printf("Point ID returned by HE5_PTattach() :    %ld \n", (long) PTid);
+  printf("Point ID returned by HE5_PTattach() :    %"PRId64" \n", PTid);
 
   nt = (hid_t *)calloc(1, sizeof(hid_t));
 
--- hdf-eos5-2.0/samples/he5_pt_readdata.c.orig	2024-12-15 10:50:32.861632087 +0100
+++ hdf-eos5-2.0/samples/he5_pt_readdata.c	2024-12-15 13:07:17.553850120 +0100
@@ -46,12 +46,12 @@ int main()
   /* Open the HDF-EOS file, "Point.h5" */
   /* --------------------------------- */
   ptfid = HE5_PTopen("Point.h5", H5F_ACC_RDONLY);
-  printf("File ID returned by HE5_PTopen() :           %ld \n", (long) ptfid);
+  printf("File ID returned by HE5_PTopen() :           %"PRId64" \n", ptfid);
 
   /* Read Simple Point */
   /* ----------------- */
   PTid = HE5_PTattach(ptfid, "Simple Point");
-  printf("Point ID returned by HE5_PTattach() :        %ld \n", (long) PTid);
+  printf("Point ID returned by HE5_PTattach() :        %"PRId64" \n", PTid);
 
   /* Get level information */
   /* --------------------- */
@@ -64,7 +64,7 @@ int main()
 	{
 	  printf("Field name:                  %s \n", level.fieldname[i]);
 	  printf("Field rank:                  %d \n", level.rank[i]);
-	  printf("Field type ID:               %ld \n", (long) level.dtype[i]);
+	  printf("Field type ID:               %"PRId64" \n", level.dtype[i]);
 	  for (j = 0; j < level.rank[i]; j++)
 		printf("Field dims:                  %d \n", (int)level.dims[i][j]);
 	  printf("Field class:                 %d \n", level.dclass[i]);
@@ -170,7 +170,7 @@ int main()
   printf("Status returned by HE5_PTdetach() :          %d \n", status);
 
   PTid = HE5_PTattach(ptfid, "FixedBuoy Point");
-  printf("Point ID returned by HE5_PTattach() :        %ld \n", (long) PTid);
+  printf("Point ID returned by HE5_PTattach() :        %"PRId64" \n", PTid);
 
   /* Read Fixed Buoy Point Attributes */
   /* -------------------------------- */
--- hdf-eos5-2.0/samples/he5_pt_writeattrs.c.orig	2024-12-15 10:50:32.861632087 +0100
+++ hdf-eos5-2.0/samples/he5_pt_writeattrs.c	2024-12-15 13:08:03.136936509 +0100
@@ -27,12 +27,12 @@ int main()
   /* Open the HDF-EOS file, "Point.h5" */
   /* --------------------------------- */
   ptfid = HE5_PTopen("Point.h5", H5F_ACC_RDWR);
-  printf("File ID returned by HE5_PTopen() :         %ld \n", (long) ptfid);
+  printf("File ID returned by HE5_PTopen() :         %"PRId64" \n", ptfid);
 
   /* Write attribute to "Fixed Buoy Point" */
   /* ------------------------------------- */
   PTid = HE5_PTattach(ptfid, "FixedBuoy Point");
-  printf("Point ID returned by HE5_PTattach() :      %ld \n", (long) PTid);
+  printf("Point ID returned by HE5_PTattach() :      %"PRId64" \n", PTid);
 
   count[0] = 1;
   status = HE5_PTwriteattr(PTid, "GlobalAttribute_int", H5T_NATIVE_INT, count, &attr);
@@ -51,7 +51,7 @@ int main()
   /* Write attributes to "Floating Buoy Point" */
   /* ----------------------------------------- */
   PTid = HE5_PTattach(ptfid, "FloatBuoy Point");
-  printf("Point ID returned by HE5_PTattach() :      %ld \n", (long) PTid);
+  printf("Point ID returned by HE5_PTattach() :      %"PRId64" \n", PTid);
 
   count[0] = 1;    
   status = HE5_PTwriteattr(PTid, "GlobalAttribute_float", H5T_NATIVE_FLOAT, count, &flt);
--- hdf-eos5-2.0/samples/he5_sw_datainfo.c.orig	2024-12-15 10:50:32.861632087 +0100
+++ hdf-eos5-2.0/samples/he5_sw_datainfo.c	2024-12-15 13:37:08.494147764 +0100
@@ -31,12 +31,12 @@ int main(void)
   /* Open the HDF-EOS swath file */
   /* --------------------------- */
   fid = HE5_SWopen(FILENAME, H5F_ACC_RDONLY);
-  printf("File ID returned by HE5_SWopen() :         %ld \n", (long) fid);
+  printf("File ID returned by HE5_SWopen() :         %"PRId64" \n", fid);
     
   /* Attach to the "Swath1" swath */
   /* ---------------------------- */
   SWid = HE5_SWattach(fid, OBJECT);
-  printf("Swath ID returned by HE5_SWattach() :      %ld \n", (long) SWid);
+  printf("Swath ID returned by HE5_SWattach() :      %"PRId64" \n", SWid);
 
   /* Inquire data type information for the "Spectra" field */
   /* ----------------------------------------------------- */
@@ -45,7 +45,7 @@ int main(void)
   printf("Status returned by HE5_SWinqdatatype() :   %d \n", status);
   if (status != FAIL)
 	{
-	  printf("\tdatatype:    %ld \n", (long) datatype);
+	  printf("\tdatatype:    %"PRId64" \n", datatype);
 	  printf("\tclass ID:    %d \n", classid);
 	  printf("\torder:       %d \n", order);
 	  printf("\tsize:        %d \n", (int)size);        
@@ -58,7 +58,7 @@ int main(void)
   printf("Status returned by HE5_SWinqdatatype() :   %d \n", status);
   if (status != FAIL)
 	{
-	  printf("\tdatatype:    %ld \n", (long) datatype);
+	  printf("\tdatatype:    %"PRId64" \n", datatype);
 	  printf("\tclass ID:    %d \n", classid);
 	  printf("\torder:       %d \n", order);
 	  printf("\tsize:        %d \n", (int)size);        
@@ -70,7 +70,7 @@ int main(void)
   printf("Status returned by HE5_EHinqglbdatatype() :  %d \n", status);
   if (status != FAIL)
         {
-          printf("\tdatatype:    %ld \n", (long) datatype);
+          printf("\tdatatype:    %"PRId64" \n", datatype);
           printf("\tclass ID:    %d \n", classid);
           printf("\torder:       %d \n", order);
           printf("\tsize:        %d \n", (int)size);
@@ -80,7 +80,7 @@ int main(void)
   printf("Status returned by HE5_EHinqglbdatatype()->GLOBAL_DOUBLE_ATTR_1  :  %d \n", status);
   if (status != FAIL)
         {
-          printf("\tdatatype:    %ld \n", (long) datatype);
+          printf("\tdatatype:    %"PRId64" \n", datatype);
           printf("\tclass ID:    %d \n", classid);
           printf("\torder:       %d \n", order);
           printf("\tsize:        %d \n", (int)size);
@@ -92,7 +92,7 @@ int main(void)
   printf("Status returned by HE5_SWinqdatatype() :   %d \n", status);
   if (status != FAIL)
 	{
-	  printf("\tdatatype:    %ld \n", (long) datatype);
+	  printf("\tdatatype:    %"PRId64" \n", datatype);
 	  printf("\tclass ID:    %d \n", classid);
 	  printf("\torder:       %d \n", order);
 	  printf("\tsize:        %d \n", (int)size);        
@@ -102,7 +102,7 @@ int main(void)
   printf("Status returned by HE5_SWinqdatatype()->GLOBAL_CHAR_ATTR_11 :   %d \n", status);
   if (status != FAIL)
         {
-          printf("\tdatatype:    %ld \n", (long) datatype);
+          printf("\tdatatype:    %"PRId64" \n", datatype);
           printf("\tclass ID:    %d \n", classid);
           printf("\torder:       %d \n", order);
           printf("\tsize:        %d \n", (int)size);
@@ -112,7 +112,7 @@ int main(void)
   printf("Status returned by HE5_SWinqdatatype()->GLOBAL_CHAR_ATTR :   %d \n", status);
   if (status != FAIL)
         {
-          printf("\tdatatype:    %ld \n", (long) datatype);
+          printf("\tdatatype:    %"PRId64" \n", datatype);
           printf("\tclass ID:    %d \n", classid);
           printf("\torder:       %d \n", order);
           printf("\tsize:        %d \n", (int)size);
@@ -123,7 +123,7 @@ int main(void)
   printf("Status returned by HE5_SWinqdatatype() :   %d \n", status);
   if (status != FAIL)
 	{
-	  printf("\tdatatype:    %ld \n", (long) datatype);
+	  printf("\tdatatype:    %"PRId64" \n", datatype);
 	  printf("\tclass ID:    %d \n", classid);
 	  printf("\torder:       %d \n", order);
 	  printf("\tsize:        %d \n", (int)size);        
@@ -134,7 +134,7 @@ int main(void)
   printf("Status returned by HE5_SWinqdatatype() :   %d \n", status);
   if (status != FAIL)
 	{
-	  printf("\tdatatype:    %ld \n", (long) datatype);
+	  printf("\tdatatype:    %"PRId64" \n", datatype);
 	  printf("\tclass ID:    %d \n", classid);
 	  printf("\torder:       %d \n", order);
 	  printf("\tsize:        %d \n", (int)size);        
@@ -145,7 +145,7 @@ int main(void)
   printf("Status returned by HE5_SWinqdatatype() :   %d \n", status);
   if (status != FAIL)
 	{
-	  printf("\tdatatype:    %ld \n", (long) datatype);
+	  printf("\tdatatype:    %"PRId64" \n", datatype);
 	  printf("\tclass ID:    %d \n", classid);
 	  printf("\torder:       %d \n", order);
 	  printf("\tsize:        %d \n", (int)size);        
--- hdf-eos5-2.0/samples/he5_sw_info.c.orig	2024-12-15 10:50:32.861632087 +0100
+++ hdf-eos5-2.0/samples/he5_sw_info.c	2024-12-15 13:39:53.289921655 +0100
@@ -110,7 +110,7 @@ int main()
 
 		  printf("geo fields: %s\n", fieldlist);
 		  for (i = 0; i < nflds; i++)
-			printf("Rank:  %d   Data type:  %ld\n", rank[i], (long) ntype[i]);
+			printf("Rank:  %d   Data type:  %"PRId64"\n", rank[i], ntype[i]);
 
 		  free(rank);
 		  free(fieldlist);
@@ -124,7 +124,7 @@ int main()
 
 		  printf("data fields: %s\n", fieldlist);
 		  for (i = 0; i < nflds; i++)
-			printf("Rank:  %d   Data type:  %ld\n", rank[i], (long) ntype[i]);
+			printf("Rank:  %d   Data type:  %"PRId64"\n", rank[i], ntype[i]);
 
 		  free(rank);
 		  free(fieldlist);
@@ -158,14 +158,14 @@ int main()
 		  /* ----------------------------- */
 		  status = HE5_SWfieldinfo(SWid, "Longitude", &rk, dim, &dtype, dimlist, NULL);
 		  printf("Longitude Rank: %d\n", rk);
-		  printf("Longitude NumberType: %ld\n", (long) dtype);
+		  printf("Longitude NumberType: %"PRId64"\n", dtype);
 		  printf("Longitude Dimension List: %s\n", dimlist);	    
 		  for (i = 0; i < rk; i++)
 			printf("Dimension %d: %lu\n",i+1,(unsigned long)dim[i]);
 
                   status = HE5_SWfieldinfo(SWid, "Test_string", &rk1, dim1, &dtype_char, dimlist1, NULL);
                   printf("Test_string Rank: %d\n", rk1);
-                  printf("Test_string NumberType: %ld\n", (long) dtype_char);
+                  printf("Test_string NumberType: %"PRId64"\n", dtype_char);
                   printf("Test_string Dimension List: %s\n", dimlist1);
                   for (i = 0; i < rk1; i++)
                         printf("Dimension %d: %lu\n",i+1,(unsigned long)dim1[i]);
@@ -175,17 +175,17 @@ int main()
 		  /* -------------------------------- */
 		  printf("Global Attribute:\n");
 		  status = HE5_SWattrinfo(SWid,"GlobalAttribute",&dtype1, &nelem);
-		  printf("\t\t Data type:          %ld\n", (long) dtype1);
+		  printf("\t\t Data type:          %"PRId64"\n", dtype1);
 		  printf("\t\t Number of elements: %lu \n", (unsigned long)nelem);    
  
                   nelem = 0;
                   status = HE5_SWattrinfo(SWid,"GLOBAL_CHAR_ATTR",&dtype1, &nelem);
-                  printf("\t\t Data type:          %ld\n", (long) dtype1);
+                  printf("\t\t Data type:          %"PRId64"\n", dtype1);
                   printf("\t\t The size of string: %lu \n", (unsigned long)nelem);
 
                   nelem = 0;
                   status = HE5_SWattrinfo(SWid,"GLOBAL_DOUBLE_ATTR",&dtype1, &nelem);
-                  printf("\t\t Data type:          %ld\n", (long) dtype1);
+                  printf("\t\t Data type:          %"PRId64"\n", dtype1);
                   printf("\t\t Number of elements: %lu \n", (unsigned long)nelem);
 
 		  nelem = 0;
@@ -194,7 +194,7 @@ int main()
 		  /* ------------------------------- */
 		  printf("Group Attribute:\n");
 		  status = HE5_SWgrpattrinfo(SWid,"GroupAttribute",&dtype1,&nelem);
-		  printf("\t\t Data type:          %ld\n", (long) dtype1);
+		  printf("\t\t Data type:          %"PRId64"\n", dtype1);
 		  printf("\t\t Number of elements: %lu \n", (unsigned long)nelem);    
 
 		  nelem = 777;
@@ -203,17 +203,17 @@ int main()
 		  /* ------------------------------- */
 		  printf("Local Attribute:\n");
 		  status = HE5_SWlocattrinfo(SWid,"Density", "LocalAttribute_1",&dtype1,&nelem);
-		  printf("\t\t Data type:          %ld\n", (long) dtype1);
+		  printf("\t\t Data type:          %"PRId64"\n", dtype1);
 		  printf("\t\t Number of elements: %lu \n", (unsigned long)nelem);    
 
 		  printf("Local Attribute:\n");
 		  status = HE5_SWlocattrinfo(SWid,"Longitude", "LocalAttribute_2",&dtype1,&nelem);
-		  printf("\t\t Data type:          %ld\n", (long) dtype1);
+		  printf("\t\t Data type:          %"PRId64"\n", dtype1);
 		  printf("\t\t Number of elements: %lu \n", (unsigned long)nelem);    
 
                   nelem = 0;
                   status = HE5_SWlocattrinfo(SWid,"Time", "LOCAL_CHAR_ATTR",&dtype1,&nelem);
-                  printf("\t\t Data type:          %ld\n", (long) dtype1);
+                  printf("\t\t Data type:          %"PRId64"\n", dtype1);
                   printf("\t\t The size of string: %lu \n", (unsigned long)nelem);
 
 		  /* Inquire Global Attributes */
--- hdf-eos5-2.0/samples/he5_sw_setup.c.orig	2024-12-15 10:50:32.861632087 +0100
+++ hdf-eos5-2.0/samples/he5_sw_setup.c	2024-12-15 13:40:14.266474682 +0100
@@ -27,12 +27,12 @@ int main()
   /* Open a new HDF-EOS swath file, "Swath.h5" */
   /* ----------------------------------------- */
   swfid = HE5_SWopen("Swath.h5", H5F_ACC_TRUNC);
-  printf("File ID returned by HE5_SWopen():       %ld \n", (long) swfid);
+  printf("File ID returned by HE5_SWopen():       %"PRId64" \n", swfid);
 
   /* Create the swath, "Swath1", within the file */
   /* ------------------------------------------- */
   SWid = HE5_SWcreate(swfid, "Swath1");
-  printf("Swath ID returned by HE5_SWcreate():    %ld \n", (long) SWid);
+  printf("Swath ID returned by HE5_SWcreate():    %"PRId64" \n", SWid);
 
   /* Define dimensions and specify their sizes */
   /* ----------------------------------------- */
--- hdf-eos5-2.0/samples/he5_sw_subset.c.orig	2024-12-15 10:50:32.861632087 +0100
+++ hdf-eos5-2.0/samples/he5_sw_subset.c	2024-12-15 13:40:45.252973480 +0100
@@ -49,7 +49,7 @@ int main()
 
 		  regionID = HE5_SWdefboxregion(SWid, cornerlon, cornerlat, HE5_HDFE_MIDPOINT);
 		  printf("\n");
-		  printf("Region ID returned by HE5_SWdefboxregion()  :          %ld \n", (long) regionID);
+		  printf("Region ID returned by HE5_SWdefboxregion()  :          %"PRId64" \n", regionID);
 	    
 		  ntype = (hid_t *)calloc(1, sizeof(hid_t) );
 
@@ -78,7 +78,7 @@ int main()
 
 		  periodID = HE5_SWdeftimeperiod(SWid, start_time, stop_time, HE5_HDFE_MIDPOINT);
 		  printf("\n");
-		  printf("Period ID returned by HE5_SWdeftimeperiod() :          %ld \n",  (long) periodID);
+		  printf("Period ID returned by HE5_SWdeftimeperiod() :          %"PRId64" \n",  periodID);
 	    
 		  status = HE5_SWperiodinfo(SWid, periodID, "Time", ntype, &rank, dims, &size);
 		  printf("Status returned by HE5_SWperiodinfo() :                %d \n",  status);
--- hdf-eos5-2.0/samples/he5_za_datainfo.c.orig	2024-12-15 10:50:32.861632087 +0100
+++ hdf-eos5-2.0/samples/he5_za_datainfo.c	2024-12-15 13:41:43.832656127 +0100
@@ -31,12 +31,12 @@ int main(void)
   /* Open the HDF-EOS ZA file */
   /* ------------------------ */
   fid = HE5_ZAopen(FILENAME, H5F_ACC_RDONLY);
-  printf("File ID returned by HE5_ZAopen() :         %ld \n", (long) fid);
+  printf("File ID returned by HE5_ZAopen() :         %"PRId64" \n", fid);
     
   /* Attach to the "ZA1" za */
   /* ---------------------- */
   ZAid = HE5_ZAattach(fid, OBJECT);
-  printf("ZA ID returned by HE5_ZAattach() :      %ld \n", (long) ZAid);
+  printf("ZA ID returned by HE5_ZAattach() :      %"PRId64" \n", ZAid);
 
   /* Inquire data type information for the "Spectra" field */
   /* ----------------------------------------------------- */
@@ -45,7 +45,7 @@ int main(void)
   printf("Status returned by HE5_ZAinqdatatype() :   %d \n", status);
   if (status != FAIL)
 	{
-	  printf("\tdatatype:    %ld \n", (long) datatype);
+	  printf("\tdatatype:    %"PRId64" \n", datatype);
 	  printf("\tclass ID:    %d \n", classid);
 	  printf("\torder:       %d \n", order);
 	  printf("\tsize:        %d \n", (int)size);        
@@ -58,7 +58,7 @@ int main(void)
   printf("Status returned by HE5_ZAinqdatatype() :   %d \n", status);
   if (status != FAIL)
 	{
-	  printf("\tdatatype:    %ld \n", (long) datatype);
+	  printf("\tdatatype:    %"PRId64" \n", datatype);
 	  printf("\tclass ID:    %d \n", classid);
 	  printf("\torder:       %d \n", order);
 	  printf("\tsize:        %d \n", (int)size);        
@@ -69,7 +69,7 @@ int main(void)
   printf("Status returned by HE5_ZAinqdatatype() :   %d \n", status);
   if (status != FAIL)
 	{
-	  printf("\tdatatype:    %ld \n", (long) datatype);
+	  printf("\tdatatype:    %"PRId64" \n", datatype);
 	  printf("\tclass ID:    %d \n", classid);
 	  printf("\torder:       %d \n", order);
 	  printf("\tsize:        %d \n", (int)size);        
@@ -80,7 +80,7 @@ int main(void)
   printf("Status returned by HE5_ZAinqdatatype() :   %d \n", status);
   if (status != FAIL)
 	{
-	  printf("\tdatatype:    %ld \n", (long) datatype);
+	  printf("\tdatatype:    %"PRId64" \n", datatype);
 	  printf("\tclass ID:    %d \n", classid);
 	  printf("\torder:       %d \n", order);
 	  printf("\tsize:        %d \n", (int)size);        
--- hdf-eos5-2.0/samples/he5_za_info.c.orig	2024-12-15 10:50:32.864965402 +0100
+++ hdf-eos5-2.0/samples/he5_za_info.c	2024-12-15 13:42:38.509026586 +0100
@@ -72,7 +72,7 @@ int main()
 
 		  printf("data fields: %s\n", fieldlist);
 		  for (i = 0; i < nflds; i++)
-			printf("Rank:  %d   Data type:  %ld\n", rank[i], (long) ntype[i]);
+			printf("Rank:  %d   Data type:  %"PRId64"\n", rank[i], ntype[i]);
 
 		  free(rank);
 		  free(fieldlist);
@@ -89,7 +89,7 @@ int main()
 		  /* -------------------------------- */
 		  printf("Global Attribute:\n");
 		  status = HE5_ZAattrinfo(ZAid,"GlobalAttribute",&dtype, &nelem);
-		  printf("\t\t Data type:          %ld\n", (long) dtype);
+		  printf("\t\t Data type:          %"PRId64"\n", dtype);
 		  printf("\t\t Number of elements: %lu \n", (unsigned long)nelem);    
 
 		  nelem = 0;
@@ -98,7 +98,7 @@ int main()
 		  /* ------------------------------- */
 		  printf("Group Attribute:\n");
 		  status = HE5_ZAgrpattrinfo(ZAid,"GroupAttribute",&dtype,&nelem);
-		  printf("\t\t Data type:          %ld\n", (long) dtype);
+		  printf("\t\t Data type:          %"PRId64"\n", dtype);
 		  printf("\t\t Number of elements: %lu \n", (unsigned long)nelem);    
 
 		  nelem = 777;
@@ -107,7 +107,7 @@ int main()
 		  /* ------------------------------- */
 		  printf("Local Attribute:\n");
 		  status = HE5_ZAlocattrinfo(ZAid,"Density", "LocalAttribute",&dtype,&nelem);
-		  printf("\t\t Data type:          %ld\n", (long) dtype);
+		  printf("\t\t Data type:          %"PRId64"\n", dtype);
 		  printf("\t\t Number of elements: %lu \n", (unsigned long)nelem);    
 
 
--- hdf-eos5-2.0/samples/he5_za_setup.c.orig	2024-12-15 10:50:32.864965402 +0100
+++ hdf-eos5-2.0/samples/he5_za_setup.c	2024-12-15 13:43:05.035549546 +0100
@@ -24,12 +24,12 @@ int main()
   /* Open a new HDF-EOS za file, "ZA.he5" */
   /* ----------------------------------- */
   zafid = HE5_ZAopen("ZA.he5", H5F_ACC_TRUNC);
-  printf("File ID returned by HE5_ZAopen():       %ld \n", (long) zafid);
+  printf("File ID returned by HE5_ZAopen():       %"PRId64" \n", zafid);
   
   /* Create the ZA, "ZA1", within the file */
   /* ------------------------------------- */
   ZAid = HE5_ZAcreate(zafid, "ZA1");
-  printf("ZA ID returned by HE5_ZAcreate():    %ld \n", (long) ZAid);
+  printf("ZA ID returned by HE5_ZAcreate():    %"PRId64" \n", ZAid);
 
   /* Define dimensions and specify their sizes */
   /* ----------------------------------------- */
--- hdfeos5/include/HE5_HdfEosDef.h.orig	2017-03-27 20:15:22.000000000 +0200
+++ hdfeos5/include/HE5_HdfEosDef.h	2019-12-11 16:02:29.100529098 +0100
@@ -549,6 +549,10 @@
 hid_t                HE5_EHint2hid(int invalue);
 hid_t                HE5_EHlong2hid(long invalue);
 int                  HE5_EHlong2int(long invalue);
+int                  HE5_EHllong2int(long long invalue);
+long                 HE5_EHllong2long(long long invalue);
+long long            HE5_EHint2llong(int invalue);
+long long            HE5_EHlong2llong(long invalue);
 
 hsize_t              HE5_EHhid2hsize(hid_t invalue);
 hsize_t              HE5_EHint2hsize(int invalue);
@@ -557,6 +561,8 @@
 long                 HE5_EHhsize2long(hsize_t invalue);
 int                  HE5_EHhsize2int(hsize_t invalue);
 hssize_t             HE5_EHhsize2hssize(hsize_t invalue);
+long long            HE5_EHhsize2llong(hsize_t invalue);
+hsize_t              HE5_EHllong2hsize(long long invalue);
 
 hssize_t             HE5_EHhid2hssize(hid_t invalue);
 hssize_t             HE5_EHint2hssize(int invalue);
@@ -565,6 +571,8 @@
 long                 HE5_EHhssize2long(hssize_t invalue);
 int                  HE5_EHhssize2int(hssize_t invalue);
 hsize_t              HE5_EHhssize2hsize(hssize_t invalue);
+long long            HE5_EHhssize2llong(hssize_t invalue);
+hssize_t             HE5_EHllong2hssize(long long invalue);
 
 unsigned LONGLONG    HE5_EHint2ullong(int invalue);
 long                 HE5_EHullong2long(unsigned LONGLONG invalue);
